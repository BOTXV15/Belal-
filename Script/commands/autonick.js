// modules/commands/autonick.js

const fs = require("fs");
const path = require("path");

const dataFile = path.join(__dirname, "cache", "nicknames.json");

// nicknames.json ржирж╛ ржерж╛ржХрж▓рзЗ рждрзИрж░рж┐
if (!fs.existsSync(dataFile)) {
  fs.writeFileSync(dataFile, JSON.stringify({}, null, 2));
}

function loadData() {
  return JSON.parse(fs.readFileSync(dataFile));
}

function saveData(data) {
  fs.writeFileSync(dataFile, JSON.stringify(data, null, 2));
}

module.exports.config = {
  name: "autonick",
  version: "3.0.0",
  hasPermssion: 1, // рж╢рзБржзрзБ ржПржбржорж┐ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ
  credits: "NK NAIEM KHAN",
  description: "рж╢рзБржзрзБ ржПржбржорж┐ржи nickname change ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ, ржЕржирзНржпрж░рж╛ ржЪрзЗржЮрзНржЬ ржХрж░рж▓рзЗ restore рж╣ржмрзЗред",
  commandCategory: "group",
  usages: "/autonick on | off | list | reset",
  cooldowns: 5
};

module.exports.handleEvent = async ({ api, event }) => {
  try {
    const { threadID, logMessageData, author, logMessageType } = event;

    if (logMessageType !== "log:user-nickname") return; // рж╢рзБржзрзБ nickname change ржзрж░ржмрзЗ

    let data = loadData();
    if (!data[threadID] || !data[threadID].enabled) return; // ржлрж┐ржЪрж╛рж░ ржЪрж╛рж▓рзБ ржирж╛ ржерж╛ржХрж▓рзЗ ржХрж┐ржЫрзБ ржХрж░ржмрзЗ ржирж╛

    const userID = logMessageData.participant_id;
    const newNickname = logMessageData.nickname || "";

    const threadInfo = await api.getThreadInfo(threadID);
    const adminIDs = threadInfo.adminIDs.map(item => item.id);

    if (adminIDs.includes(author)) {
      // ржПржбржорж┐ржи change ржХрж░рж▓рзЗ save рж╣ржмрзЗ
      data[threadID].nicknames[userID] = newNickname;
      saveData(data);
      return api.sendMessage(`тЬЕ ржПржбржорж┐ржи nickname рж╕рзЗржЯ ржХрж░рзЗржЫрзЗржи: ${newNickname || "(ржЦрж╛рж▓рж┐)"}`, threadID);

    } else {
      // рж╕рж╛ржзрж╛рж░ржг ржЗржЙржЬрж╛рж░ change ржХрж░рж▓рзЗ restore
      const oldNickname = data[threadID].nicknames[userID] || "";
      await api.changeNickname(oldNickname, threadID, userID);
      return api.sendMessage(`тЪая╕П рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржбржорж┐ржи nickname ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ!\nтЭМ ржЖржкржирж╛рж░ ржкрж░рж┐ржмрж░рзНрждржи restore рж╣рзЯрзЗржЫрзЗред`, threadID);
    }
  } catch (e) {
    console.error("AutoNick error:", e);
  }
};

module.exports.run = async ({ api, event, args, Users }) => {
  let data = loadData();
  if (!data[event.threadID]) {
    data[event.threadID] = { enabled: false, nicknames: {} };
  }

  if (args[0] === "on") {
    data[event.threadID].enabled = true;
    saveData(data);
    return api.sendMessage("тЬЕ AutoNick рж╕рж┐рж╕рзНржЯрзЗржо ржЪрж╛рж▓рзБ рж╣рзЯрзЗржЫрзЗ! ржПржЦржи рж╢рзБржзрзБ ржПржбржорж┐ржи nickname change ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗред", event.threadID);

  } else if (args[0] === "off") {
    data[event.threadID].enabled = false;
    saveData(data);
    return api.sendMessage("тЭМ AutoNick рж╕рж┐рж╕рзНржЯрзЗржо ржмржирзНржз ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", event.threadID);

  } else if (args[0] === "list") {
    const nickList = data[event.threadID].nicknames;
    if (!nickList || Object.keys(nickList).length === 0) {
      return api.sendMessage("тД╣я╕П ржПржЦржирзЛ ржХрзЛржирзЛ nickname save ржХрж░рж╛ рж╣рзЯржирж┐ред", event.threadID);
    }

    let msg = "ЁЯУЛ Saved Nicknames:\n";
    for (const uid of Object.keys(nickList)) {
      const name = await Users.getNameUser(uid);
      const nick = nickList[uid] || "(ржЦрж╛рж▓рж┐)";
      msg += `тАв ${name} тЖТ ${nick}\n`;
    }
    return api.sendMessage(msg, event.threadID);

  } else if (args[0] === "reset") {
    data[event.threadID].nicknames = {}; // ржкрзБрж░рзЛ ржЧрзНрж░рзБржкрзЗрж░ nicknames ржбрж┐рж▓рж┐ржЯ
    saveData(data);
    return api.sendMessage("ЁЯФД ржПржЗ ржЧрзНрж░рзБржкрзЗрж░ рж╕ржм saved nickname ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", event.threadID);

  } else {
    return api.sendMessage(
      "тД╣я╕П ржмрзНржпржмрж╣рж╛рж░:\n/autonick on тЖТ ржЪрж╛рж▓рзБ\n/autonick off тЖТ ржмржирзНржз\n/autonick list тЖТ saved nickname ржжрзЗржЦрзБржи\n/autonick reset тЖТ рж╕ржм ржбрж╛ржЯрж╛ ржбрж┐рж▓рж┐ржЯ",
      event.threadID
    );
  }
};
